// <auto-generated />
using System;
using DataAccess.Concreate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(CirqularDbContext))]
    [Migration("20230206143643_230206part3")]
    partial class _230206part3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Concreate.Definition", b =>
                {
                    b.Property<int>("DefinitionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefinitionID"), 1L, 1);

                    b.Property<string>("DefinitionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MetarialID")
                        .HasColumnType("int");

                    b.HasKey("DefinitionID");

                    b.HasIndex("MetarialID");

                    b.ToTable("Definitions");

                    b.HasData(
                        new
                        {
                            DefinitionID = 331,
                            DefinitionName = "Organic",
                            MetarialID = 33
                        },
                        new
                        {
                            DefinitionID = 332,
                            DefinitionName = "Inorganic",
                            MetarialID = 33
                        });
                });

            modelBuilder.Entity("Entities.Concreate.ElectricalProperty", b =>
                {
                    b.Property<int>("ElectricalPropertyID")
                        .HasColumnType("int");

                    b.Property<int?>("DielectricConstant")
                        .HasColumnType("int");

                    b.Property<int?>("ElectricalResistivity")
                        .HasColumnType("int");

                    b.HasKey("ElectricalPropertyID");

                    b.ToTable("ElectricalProperties");
                });

            modelBuilder.Entity("Entities.Concreate.Form", b =>
                {
                    b.Property<int>("FormID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormID"), 1L, 1);

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginID")
                        .HasColumnType("int");

                    b.HasKey("FormID");

                    b.HasIndex("OriginID");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            FormID = 33111,
                            FormName = "Fiber",
                            OriginID = 3311
                        });
                });

            modelBuilder.Entity("Entities.Concreate.MaterialMetric", b =>
                {
                    b.Property<int>("MaterialMetricID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialMetricID"), 1L, 1);

                    b.Property<int?>("ElectricalPropertyID")
                        .HasColumnType("int");

                    b.Property<int?>("MechanicalPropertyID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpticalPropertyID")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalPropertyID")
                        .HasColumnType("int");

                    b.Property<int?>("ThermalPropertyID")
                        .HasColumnType("int");

                    b.HasKey("MaterialMetricID");

                    b.ToTable("MaterialMetrics");

                    b.HasData(
                        new
                        {
                            MaterialMetricID = 1,
                            Notes = "Test test test"
                        });
                });

            modelBuilder.Entity("Entities.Concreate.MechanicalProperty", b =>
                {
                    b.Property<int>("MechanicalPropertyID")
                        .HasColumnType("int");

                    b.Property<int?>("ElongationOfBreak")
                        .HasColumnType("int");

                    b.Property<int?>("ModulusofElasticity")
                        .HasColumnType("int");

                    b.Property<int?>("PoissonsRatio")
                        .HasColumnType("int");

                    b.Property<int?>("ShearModulus")
                        .HasColumnType("int");

                    b.Property<int?>("TensileStr")
                        .HasColumnType("int");

                    b.HasKey("MechanicalPropertyID");

                    b.ToTable("MechanicalProperties");
                });

            modelBuilder.Entity("Entities.Concreate.Metarial", b =>
                {
                    b.Property<int>("MetarialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetarialID"), 1L, 1);

                    b.Property<string>("MetarialName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("TaxonomyID")
                        .HasColumnType("int");

                    b.HasKey("MetarialID");

                    b.HasIndex("TaxonomyID");

                    b.ToTable("Metarials");

                    b.HasData(
                        new
                        {
                            MetarialID = 31,
                            MetarialName = "Aerogel ",
                            TaxonomyID = 3
                        },
                        new
                        {
                            MetarialID = 32,
                            MetarialName = "Composite Fibers ",
                            TaxonomyID = 3
                        },
                        new
                        {
                            MetarialID = 33,
                            MetarialName = "Additive/Filler for Polymer  ",
                            TaxonomyID = 3
                        },
                        new
                        {
                            MetarialID = 34,
                            MetarialName = "Catalyst/Initiator",
                            TaxonomyID = 3
                        },
                        new
                        {
                            MetarialID = 35,
                            MetarialName = "Composite Core Material ",
                            TaxonomyID = 3
                        },
                        new
                        {
                            MetarialID = 37,
                            MetarialName = "Semiconductor ",
                            TaxonomyID = 3
                        },
                        new
                        {
                            MetarialID = 38,
                            MetarialName = "Metal Foam, Mesh, or Honeycomb  ",
                            TaxonomyID = 3
                        },
                        new
                        {
                            MetarialID = 39,
                            MetarialName = "Metal Matrix Composite ",
                            TaxonomyID = 3
                        });
                });

            modelBuilder.Entity("Entities.Concreate.OpticalProperty", b =>
                {
                    b.Property<int>("OpticalPropertyID")
                        .HasColumnType("int");

                    b.Property<int?>("RefractiveIndex")
                        .HasColumnType("int");

                    b.HasKey("OpticalPropertyID");

                    b.ToTable("OpticalProperties");
                });

            modelBuilder.Entity("Entities.Concreate.Origin", b =>
                {
                    b.Property<int>("OriginID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OriginID"), 1L, 1);

                    b.Property<int>("DefinationID")
                        .HasColumnType("int");

                    b.Property<string>("OriginName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OriginID");

                    b.HasIndex("DefinationID");

                    b.ToTable("Origins");

                    b.HasData(
                        new
                        {
                            OriginID = 3311,
                            DefinationID = 331,
                            OriginName = "Lignocelulosic"
                        },
                        new
                        {
                            OriginID = 3312,
                            DefinationID = 331,
                            OriginName = "Agri-waste"
                        },
                        new
                        {
                            OriginID = 3313,
                            DefinationID = 331,
                            OriginName = "Other"
                        });
                });

            modelBuilder.Entity("Entities.Concreate.PhysicalProperty", b =>
                {
                    b.Property<int>("PhysicalPropertyID")
                        .HasColumnType("int");

                    b.Property<int>("Density")
                        .HasColumnType("int");

                    b.HasKey("PhysicalPropertyID");

                    b.ToTable("PhysicalProperties");
                });

            modelBuilder.Entity("Entities.Concreate.Plant", b =>
                {
                    b.Property<int>("PlantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantID"), 1L, 1);

                    b.Property<int>("FormID")
                        .HasColumnType("int");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlantOfMaterialMetricID")
                        .HasColumnType("int");

                    b.HasKey("PlantID");

                    b.HasIndex("FormID");

                    b.HasIndex("PlantOfMaterialMetricID")
                        .IsUnique()
                        .HasFilter("[PlantOfMaterialMetricID] IS NOT NULL");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            PlantID = 331111,
                            FormID = 33111,
                            PlantName = "Sisal",
                            PlantOfMaterialMetricID = 1
                        });
                });

            modelBuilder.Entity("Entities.Concreate.ThermalProperty", b =>
                {
                    b.Property<int>("ThermalPropertyID")
                        .HasColumnType("int");

                    b.Property<int?>("CTE")
                        .HasColumnType("int");

                    b.Property<int?>("SofteningPoint")
                        .HasColumnType("int");

                    b.Property<int?>("SpecificHeatCapacity")
                        .HasColumnType("int");

                    b.HasKey("ThermalPropertyID");

                    b.ToTable("ThermalProperties");
                });

            modelBuilder.Entity("Entitites.Concrete.Taxonomy", b =>
                {
                    b.Property<int>("TaxonomyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxonomyID"), 1L, 1);

                    b.Property<string>("TaxonomyName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("TaxonomyID");

                    b.ToTable("Taxonomies");

                    b.HasData(
                        new
                        {
                            TaxonomyID = 1,
                            TaxonomyName = "Carbon"
                        },
                        new
                        {
                            TaxonomyID = 2,
                            TaxonomyName = "Ceramic Replacement"
                        },
                        new
                        {
                            TaxonomyID = 3,
                            TaxonomyName = "Engineering Material"
                        },
                        new
                        {
                            TaxonomyID = 4,
                            TaxonomyName = "Fluid"
                        },
                        new
                        {
                            TaxonomyID = 5,
                            TaxonomyName = "Polymer"
                        });
                });

            modelBuilder.Entity("Entities.Concreate.Definition", b =>
                {
                    b.HasOne("Entities.Concreate.Metarial", "Metarial")
                        .WithMany("Definitions")
                        .HasForeignKey("MetarialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metarial");
                });

            modelBuilder.Entity("Entities.Concreate.ElectricalProperty", b =>
                {
                    b.HasOne("Entities.Concreate.MaterialMetric", "MaterialMetric")
                        .WithOne("ElectricalProperty")
                        .HasForeignKey("Entities.Concreate.ElectricalProperty", "ElectricalPropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialMetric");
                });

            modelBuilder.Entity("Entities.Concreate.Form", b =>
                {
                    b.HasOne("Entities.Concreate.Origin", "Origin")
                        .WithMany("Forms")
                        .HasForeignKey("OriginID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("Entities.Concreate.MechanicalProperty", b =>
                {
                    b.HasOne("Entities.Concreate.MaterialMetric", "MaterialMetric")
                        .WithOne("MechanicalProperty")
                        .HasForeignKey("Entities.Concreate.MechanicalProperty", "MechanicalPropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialMetric");
                });

            modelBuilder.Entity("Entities.Concreate.Metarial", b =>
                {
                    b.HasOne("Entitites.Concrete.Taxonomy", "Taxonomy")
                        .WithMany("Metarial")
                        .HasForeignKey("TaxonomyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Taxonomy");
                });

            modelBuilder.Entity("Entities.Concreate.OpticalProperty", b =>
                {
                    b.HasOne("Entities.Concreate.MaterialMetric", "MaterialMetric")
                        .WithOne("OpticalProperty")
                        .HasForeignKey("Entities.Concreate.OpticalProperty", "OpticalPropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialMetric");
                });

            modelBuilder.Entity("Entities.Concreate.Origin", b =>
                {
                    b.HasOne("Entities.Concreate.Definition", "Definition")
                        .WithMany("Origins")
                        .HasForeignKey("DefinationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");
                });

            modelBuilder.Entity("Entities.Concreate.PhysicalProperty", b =>
                {
                    b.HasOne("Entities.Concreate.MaterialMetric", "MaterialMetric")
                        .WithOne("PhysicalProperty")
                        .HasForeignKey("Entities.Concreate.PhysicalProperty", "PhysicalPropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialMetric");
                });

            modelBuilder.Entity("Entities.Concreate.Plant", b =>
                {
                    b.HasOne("Entities.Concreate.Form", "Form")
                        .WithMany("Plants")
                        .HasForeignKey("FormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concreate.MaterialMetric", "MaterialMetric")
                        .WithOne("Plant")
                        .HasForeignKey("Entities.Concreate.Plant", "PlantOfMaterialMetricID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Form");

                    b.Navigation("MaterialMetric");
                });

            modelBuilder.Entity("Entities.Concreate.ThermalProperty", b =>
                {
                    b.HasOne("Entities.Concreate.MaterialMetric", "MaterialMetric")
                        .WithOne("ThermalProperty")
                        .HasForeignKey("Entities.Concreate.ThermalProperty", "ThermalPropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialMetric");
                });

            modelBuilder.Entity("Entities.Concreate.Definition", b =>
                {
                    b.Navigation("Origins");
                });

            modelBuilder.Entity("Entities.Concreate.Form", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("Entities.Concreate.MaterialMetric", b =>
                {
                    b.Navigation("ElectricalProperty");

                    b.Navigation("MechanicalProperty");

                    b.Navigation("OpticalProperty");

                    b.Navigation("PhysicalProperty");

                    b.Navigation("Plant")
                        .IsRequired();

                    b.Navigation("ThermalProperty");
                });

            modelBuilder.Entity("Entities.Concreate.Metarial", b =>
                {
                    b.Navigation("Definitions");
                });

            modelBuilder.Entity("Entities.Concreate.Origin", b =>
                {
                    b.Navigation("Forms");
                });

            modelBuilder.Entity("Entitites.Concrete.Taxonomy", b =>
                {
                    b.Navigation("Metarial");
                });
#pragma warning restore 612, 618
        }
    }
}
